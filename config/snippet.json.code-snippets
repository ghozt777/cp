{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "CPP Template": {
    "prefix": "cp",
    "body": [
      "#include<bits/stdc++.h>",
      "",
      "using namespace std;",
      "",
      "typedef long long ll;",
      "typedef vector<int> vi;",
      "typedef vector<vi> vii;",
      "typedef pair<int,int> pi;",
      "typedef map<string , int> msi;",
      "",
      "#define IN emplace",
      "#define PBK pop_back",
      "#define PB push_back",
      "#define MP make_pair",
      "#define f(n) for(int i = 0 ; i < n ; i++)",
      "#define fr(itr, n) for(int itr = 0 ; itr < n ; itr++)",
      "",
      "",
      "void Run();",
      "void printArray(int[] , int) ;",
      "",
      "int main(){",
      "",
      "ios::sync_with_stdio(0);",
      "cin.tie(0);",

      "Run();",

      "    return 0;",
      "}",
      "",
      "void Run() {",
      // run your code here  ,
      "",
      "",
      "    return ;",
      "}",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "void printArray(int arr[] , int n){",
      "    if(n==0){cout << \"[]\"; return ;}",
      "    if(n==1){cout << \"[\" << arr[0] << \"]\"; return ;}",
      "    cout << \"[\" << arr[0] <<\", \" ;",
      "    for(int i = 1 ; i < n - 1 ; i++) cout << arr[i] << \", \" ; ",
      "    cout << arr[n-1] << \"]\" ;",
      "}"
    ],
    "description": "C++ Template for CP"
  }
}

